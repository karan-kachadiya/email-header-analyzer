How the Email Header Analyzer Works - Detailed Explanation
This Python script is designed to analyze email headers and extract useful information, including the sender, recipient, authentication results (SPF, DKIM, DMARC), and the mail transfer history (Received headers). It then logs the results into a structured text file for easy review.

1. Execution Flow of the Script
When you run the script using:

sh
Copy
Edit
python email_header_analyzer.py email_file.eml
It performs the following steps:

Takes an email file (.eml) as input (from the command line).
Parses the email headers to extract key details.
Extracts authentication results (SPF, DKIM, DMARC).
Saves the extracted information to a structured log file (logs/email_analysis_log.txt).
Prints a confirmation message that the process is complete.
2. Code Breakdown (Step by Step)
Step 1: Importing Required Modules
The script starts by importing necessary Python modules:

python
Copy
Edit
import os
import sys
import re
import datetime
from email import policy
from email.parser import BytesParser
os: Handles file and directory operations.
sys: Reads command-line arguments.
re: Uses regular expressions to search for authentication results (SPF, DKIM, DMARC).
datetime: Generates timestamps for logging.
email.policy and email.parser.BytesParser: Used for parsing email headers.
Step 2: Parsing Email Headers
Function: parse_email_headers(file_path)
This function extracts email headers from a given .eml file.

python
Copy
Edit
def parse_email_headers(file_path):
    if not os.path.isfile(file_path):
        print(f"Error: The file '{file_path}' does not exist.")
        sys.exit(1)
First, it checks if the file exists. If not, it prints an error and exits.
python
Copy
Edit
    with open(file_path, "rb") as f:
        msg = BytesParser(policy=policy.default).parse(f)
The file is opened in binary mode ("rb") and parsed using BytesParser.
python
Copy
Edit
    headers = {
        "From": msg.get("From"),
        "To": msg.get("To"),
        "Subject": msg.get("Subject", "No Subject"),
        "Date": msg.get("Date"),
        "Return-Path": msg.get("Return-Path"),
        "Received": msg.get_all("Received", []),
        "SPF": extract_auth_result(msg, "spf="),
        "DKIM": extract_auth_result(msg, "dkim="),
        "DMARC": extract_auth_result(msg, "dmarc="),
    }
This extracts key email headers:

"From": Senderâ€™s email address.
"To": Recipientâ€™s email address.
"Subject": Email subject (if missing, defaults to "No Subject").
"Date": Timestamp when the email was sent.
"Return-Path": The return address used for bounce emails.
"Received": List of mail server hops the email took.
"SPF", "DKIM", "DMARC": Extracted authentication results.
Returns the headers as a dictionary.

Step 3: Extracting Authentication Results
Function: extract_auth_result(msg, auth_type)
This function extracts SPF, DKIM, and DMARC authentication results from the email.

python
Copy
Edit
def extract_auth_result(msg, auth_type):
    auth_results = msg.get_all("Authentication-Results", [])
Retrieves all Authentication-Results headers.
python
Copy
Edit
    for result in auth_results:
        match = re.search(rf"{auth_type}(\w+)", result, re.IGNORECASE)
        if match:
            return match.group(1)
Uses regular expressions (re.search()) to find results like "spf=pass", "dkim=fail", etc.
If a match is found, it returns the result (pass, fail, or none).
python
Copy
Edit
    return "Not Found"
If no result is found, it returns "Not Found".
Step 4: Saving Extracted Data to a Log File
Function: save_to_log(headers)
This function logs extracted email data into a text file.

python
Copy
Edit
def save_to_log(headers):
    log_folder = "logs"
    log_file_path = os.path.join(log_folder, "email_analysis_log.txt")
Defines the logs/ folder where logs will be stored.
Sets log_file_path to "logs/email_analysis_log.txt".
python
Copy
Edit
    os.makedirs(log_folder, exist_ok=True)
Creates the folder if it doesnâ€™t exist.
python
Copy
Edit
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
Gets the current date and time.
python
Copy
Edit
    with open(log_file_path, "a") as log_file:
        log_file.write(f"\nEmail Header Report - {current_time}\n")
        log_file.write("=" * 80 + "\n")
Opens the log file in append mode ("a").
Adds a timestamp and separator (= * 80).
python
Copy
Edit
        for key, value in headers.items():
            log_file.write(f"{key}:\n")  
            if isinstance(value, list):
                for item in value:
                    log_file.write(f"  {item}\n")  
            else:
                log_file.write(f"  {value}\n")
Loops through each email header and writes it into the log file.
python
Copy
Edit
        log_file.write("=" * 80 + "\n")
Ends with a separator.
python
Copy
Edit
    print(f"Results saved to: {log_file_path}")
Prints the path of the saved log file.
Step 5: Main Execution Block
python
Copy
Edit
if __name__ == "__main__":
Ensures that the script only runs when executed directly (not imported as a module).
python
Copy
Edit
    if len(sys.argv) < 2:
        print("Usage: python email_header_analyzer.py <email_file>")
        sys.exit(1)
Checks if an email file is provided as an argument.
If not, it prints a usage message and exits.
python
Copy
Edit
    email_file = sys.argv[1]
Retrieves the email file from command-line input.
python
Copy
Edit
    headers = parse_email_headers(email_file)
Calls parse_email_headers() to extract email headers.
python
Copy
Edit
    save_to_log(headers)
Saves the extracted data into the log file.
python
Copy
Edit
    print("Processing completed. Check the 'logs' folder for the results.")
Prints a success message.
3. Expected Output
Console Output
vbnet
Copy
Edit
Results saved to: logs/email_analysis_log.txt
Processing completed. Check the 'logs' folder for the results.
Log File (logs/email_analysis_log.txt)
vbnet
Copy
Edit
Email Header Report - 2025-02-04 14:30:15
================================================================================
From:
  sender@example.com
To:
  recipient@example.com
Subject:
  Important Notice
Date:
  Tue, 04 Feb 2025 12:30:00 +0000
Return-Path:
  <bounces@example.com>
Received:
  from mail.example.com by smtp.example.net
SPF:
  pass
DKIM:
  fail
DMARC:
  pass
================================================================================
Email headers are neatly structured for analysis.
4. Key Features
âœ… Parses email headers from .eml files.
âœ… Extracts sender, recipient, subject, and timestamps.
âœ… Extracts SPF, DKIM, and DMARC results.
âœ… Saves all data in a structured log file.
âœ… Helps in email forensics, spam detection, and cybersecurity investigations.

This is how the Email Header Analyzer script works in detail! ðŸš€
